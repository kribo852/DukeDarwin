/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package geneticlibraryjava.library;

import java.util.Random;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class GeneticLibraryTest {
    
    //this test tries to maximize the area of a rectangle, where the sum of the lengths of the sides,
    // of the rectangle is constant
    @Test void testSolveMaximumArea() {
        GeneticLibrary<double[]> geneticLibrary = new GeneticLibrary<double[]>(double[].class);
        
        double[] result = geneticLibrary.simplified_run(this::newGenome, this::mutate, this::scoreFunction, this::finished);

        assertTrue(0.24 < result[0]*result[1]);
    }

    double[] newGenome() {
        double[] rtn = new double[2];

        rtn[0] = new Random().nextDouble();
        rtn[1] = new Random().nextDouble();

        return rtn;
    }

    double[] mutate(double[] oldGenome) {
        double[] rtn = new double[2];

        rtn[0] = oldGenome[0];
        rtn[1] = oldGenome[1];

        double delta = new Random().nextGaussian()*0.1;

        rtn[0] += delta;
        if(new Random().nextBoolean()) {
            rtn[1] -= delta;    
        } else {
            rtn[1] += new Random().nextGaussian()*0.1;
        }
        return rtn;
    }

    boolean finished(double[] genome) {
        return scoreFunction(genome) > 0.2499;
    }

    double scoreFunction(double[] genome) {
        if(genome[0] + genome[1] > 1.0) {
            return -10.0;
        }

        return genome[0] * genome[1];
    }

}
