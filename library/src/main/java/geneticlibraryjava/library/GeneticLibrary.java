/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package geneticlibraryjava.library;

import java.util.function.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Random;
import java.lang.reflect.Array;


public class GeneticLibrary<GenomeType> {

    private Class genomeClass;

    private static final int HABITAT_SIZE = 500;

    public GeneticLibrary(Class genomeClass) {
        this.genomeClass = genomeClass;
    }

    //Be careful to copy the data when mutating the genome with the mutator function, otherwise the 
    //algorithm wonÂ´t work as expected
    public GenomeType simplified_run(Supplier<GenomeType> newGenomeSupplier, 
        UnaryOperator<GenomeType> mutator,
        ToDoubleFunction<GenomeType> scoreFunction, 
        Predicate<GenomeType> finishPredicate) {

        Function<GenomeType[], GenomeType> composedMutator = (genomeArray) -> {
            return mutator.apply(genomeArray[new Random().nextInt(genomeArray.length)]);
        };

        Consumer<GenomeType> printGenome = (genome) -> {
            System.out.println(genome);
            System.out.println("score: " + scoreFunction.applyAsDouble(genome));
        };

        return run_algorithm(newGenomeSupplier, List.of(composedMutator), printGenome, scoreFunction, finishPredicate);
    }

    public GenomeType run_algorithm(Supplier<GenomeType> newGenomeSupplier, 
        List<Function<GenomeType[], GenomeType>> mutators,
        Consumer<GenomeType> printGenome,
        ToDoubleFunction<GenomeType> scoreFunction,
        Predicate<GenomeType> finishPredicate) {

        GenomeType[] habitat = (GenomeType[])Array.newInstance(genomeClass, HABITAT_SIZE);
        double scores[] = new double[HABITAT_SIZE];
        int bestScoreIndex = 0;

        for (int i=0; i< habitat.length; i++) {
            habitat[i] = newGenomeSupplier.get();
            scores[i] = scoreFunction.applyAsDouble(habitat[i]);
            bestScoreIndex = scores[i] > scores[bestScoreIndex] ? i: bestScoreIndex; 
        }

        long counter = 0L;

        while(!finishPredicate.test((GenomeType)habitat[bestScoreIndex])) {

            GenomeType child = mutators.get(0).apply(habitat);
            double childScore = scoreFunction.applyAsDouble(child);
            int randomInsertionPoint = new Random().nextInt(HABITAT_SIZE);

            for (int i=0; i<HABITAT_SIZE; i++) {
                int offsetedindex = ( i + randomInsertionPoint ) % HABITAT_SIZE;
                if(childScore > scores[offsetedindex]) {
                    habitat[offsetedindex] = child;
                    scores[offsetedindex] = childScore;
                    if(childScore > scores[bestScoreIndex]) {
                        bestScoreIndex = offsetedindex;
                        if (counter >= 1000) {
                            printGenome.accept(habitat[bestScoreIndex]);
                            counter = 0L;
                        }
                    }
                    break;
                }
            }
            counter ++;

        }
        printGenome.accept(habitat[bestScoreIndex]);

        return (GenomeType) habitat[bestScoreIndex];
    }
    
}
